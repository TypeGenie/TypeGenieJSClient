version: 0.2


env:
  shell: bash
  git-credential-helper: yes
  secrets-manager:
    OAUTH_TOKEN: " git_oauth_token:oauth_token"


phases:
  install:
    commands:
      - apt-get update
      - curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
      - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
      - apt update
      - apt install -y awscli git gh nodejs
      - curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.12.7/2019-03-27/bin/linux/amd64/aws-iam-authenticator
      - chmod +x ./aws-iam-authenticator
      - mkdir -p ~/bin && cp ./aws-iam-authenticator ~/bin/aws-iam-authenticator && export PATH=~/bin:$PATH
  pre_build:
    commands:
      - AWS_ACCOUNT_ID=705303224111
      - AWS_DEFAULT_REGION=eu-west-1
      - IMAGE_REPO_NAME=typegenie-api-client
      - REPO_NAME=TypeGenieJSClient
      - REPO_URL=github.com/abhitopia/$REPO_NAME.git
      - aws --version
      - git config --global user.email "renato@typegenie.net"
      - git config --global user.name "renatomrochatg"
      - GITHUB_USER=renatomrochatg
      - ECR_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_URI
      - REPOSITORY_URI=$ECR_URI/$IMAGE_REPO_NAME
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
      - echo Installing source NPM dependencies...
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
#      - docker build -t tester-container:latest -f Tests.Dockerfile .
      - echo Running tests from test container
  post_build:
    commands:
      - echo codebuild succeeding is $CODEBUILD_BUILD_SUCCEEDING
      - echo Build completed on `date`
      - |
        if [ "$CODEBUILD_BUILD_SUCCEEDING" == 1 ]; then
          git remote set-url origin https://$GITHUB_USER:$OAUTH_TOKEN@$REPO_URL
          git fetch
          git checkout cicd_integration
          echo Will increment version
          npm version patch
          git add package.json
          git commit -m "Codebuild bumpversion"
          git push origin cicd_integration
          npm install
          npm run build
          tar -czvf dist.tgz dist/*
          echo Build, version patch update and tar complete... Will now create release tag
          UPDATED_VERSION=$(awk -F \" '/"version": ".+"/ { print $4; exit; }' package.json)
          git tag -a $ENV-release-$UPDATED_VERSION -m "Automatic cicd tag"
          git push --tags origin cicd_integration
          echo tags pushed... Will now create release
          gh release create test-release --title "CICD test release $UPDATED_VERSION" --note "Release automatically created through cicd pipeline" dist.tgz
        else
          echo Unit tests did not pass... not suitable for staging release
        fi



