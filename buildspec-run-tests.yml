version: 0.2


env:
  shell: bash
  git-credential-helper: yes
  secrets-manager:
    OAUTH_TOKEN: "typegenie-developer-oauth-token:oauth_token"


phases:
  install:
    commands:
      - echo No installs required
  pre_build:
    commands:
      - AWS_ACCOUNT_ID=705303224111
      - AWS_DEFAULT_REGION=eu-west-1
      - IMAGE_REPO_NAME=typegenie-api-client
      - REPO_NAME=TypeGenieJSClient
      - REPO_URL=github.com/abhitopia/$REPO_NAME.git
      - aws --version
      - ECR_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_URI
      - REPOSITORY_URI=$ECR_URI/$IMAGE_REPO_NAME
#      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
      - echo Installing source NPM dependencies...
  build:
    commands:
      - DATE=$(date '+%Y-%m-%d-%H-%M')
      - echo Build started on `date`
      - echo Building the Docker image...
#      - docker build -t tester-container:latest -f Tests.Dockerfile .
      - echo Running tests from test container
  post_build:
    commands:
      - echo codebuild succeeding is $CODEBUILD_BUILD_SUCCEEDING
      - echo Build completed on `date`
      - |
        if [ "$CODEBUILD_BUILD_SUCCEEDING" == 1 ]; then
          git remote set-url origin https://$GITHUB_USER:$OAUTH_TOKEN@$REPO_URL
          git fetch
          git checkout cicd_integration
          echo Will increment version
          npm version patch
          git push origin cicd_integration
          echo Build, version patch update and tar complete... Will now create release tag
          UPDATED_VERSION=v$(awk -F \" '/"version": ".+"/ { print $4; exit; }' package.json)
          git push origin refs/tags/$UPDATED_VERSION
          echo tags pushed... Will now create release
          touch token.txt
          echo $OAUTH_TOKEN >> token.txt
          gh auth login --with-token < token.txt
          gh release create $UPDATED_VERSION --title "CICD test release $UPDATED_VERSION" --notes "Release automatically created through cicd pipeline"
        else
          echo Unit tests did not pass... not suitable for staging release
        fi



